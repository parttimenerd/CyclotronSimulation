/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cyclotronsimulation;

import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Johannes
 */
public class MainFrame extends javax.swing.JFrame {

   private Timer timer;
   
   /**
    * Creates new form MainFrame
    */
   public MainFrame() {
      initComponents();
      timer = new Timer();
      timer.scheduleAtFixedRate(new TimerTask(){

         @Override
         public void run() {
            zyklotron.calc();
         }
      }, 10, 20);
      timer.scheduleAtFixedRate(new TimerTask(){

         @Override
         public void run() {
                           repaint();
         }
      }, 10, 30);
      
      java.awt.EventQueue.invokeLater(new Runnable() {

         @Override
         public void run() {
            options_frame.setVisible(true);
         }
      });
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        options_frame = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        current_slider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        magnetic_induction_slider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        mass_slider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        radius_slider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        pixel_slider = new javax.swing.JSlider();
        clear_button = new javax.swing.JButton();
        s_slider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        add_object_button = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        time_fac_slider = new javax.swing.JSlider();
        zyklotron = new cyclotronsimulation.Cyclotron();

        options_frame.setTitle("Cyclotron simulation preferences");
        options_frame.setMaximumSize(new java.awt.Dimension(2147483647, 540));
        options_frame.setMinimumSize(new java.awt.Dimension(510, 540));
        options_frame.setPreferredSize(new java.awt.Dimension(510, 540));

        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 540));

        jLabel1.setText("U in nV");

        current_slider.setMajorTickSpacing(500);
        current_slider.setMaximum(3000);
        current_slider.setMinorTickSpacing(100);
        current_slider.setPaintLabels(true);
        current_slider.setPaintTicks(true);
        current_slider.setValue((int)(zyklotron.getCurrent() * 1E9));
        current_slider.setAutoscrolls(true);
        current_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                current_sliderStateChanged(evt);
            }
        });

        jLabel2.setText("B in nT");

        magnetic_induction_slider.setMajorTickSpacing(500);
        magnetic_induction_slider.setMaximum(3000);
        magnetic_induction_slider.setMinorTickSpacing(100);
        magnetic_induction_slider.setPaintLabels(true);
        magnetic_induction_slider.setPaintTicks(true);
        magnetic_induction_slider.setValue((int)(zyklotron.getMagnetic_induction() * 1E9));
        magnetic_induction_slider.setAutoscrolls(true);
        magnetic_induction_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                magnetic_induction_sliderStateChanged(evt);
            }
        });

        jLabel3.setText("M in Pm");
        jLabel3.setToolTipText("Mass in proton masses");

        mass_slider.setMajorTickSpacing(100);
        mass_slider.setMaximum(500);
        mass_slider.setMinorTickSpacing(10);
        mass_slider.setPaintLabels(true);
        mass_slider.setPaintTicks(true);
        mass_slider.setValue((int)(zyklotron.getObject_mass()));
        mass_slider.setAutoscrolls(true);
        mass_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mass_sliderStateChanged(evt);
            }
        });

        jLabel4.setText("Radius in dm");
        jLabel4.setToolTipText("Mass in proton masses");

        radius_slider.setMajorTickSpacing(50);
        radius_slider.setMaximum(200);
        radius_slider.setMinorTickSpacing(5);
        radius_slider.setPaintLabels(true);
        radius_slider.setPaintTicks(true);
        radius_slider.setValue((int)zyklotron.getRadius_m() * 10);
        radius_slider.setAutoscrolls(true);
        radius_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radius_sliderStateChanged(evt);
            }
        });

        jLabel5.setText("Pixel per m");
        jLabel5.setToolTipText("");

        pixel_slider.setMajorTickSpacing(20);
        pixel_slider.setMinorTickSpacing(5);
        pixel_slider.setPaintLabels(true);
        pixel_slider.setPaintTicks(true);
        pixel_slider.setValue((int)zyklotron.getPx_per_m());
        pixel_slider.setAutoscrolls(true);
        pixel_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pixel_sliderStateChanged(evt);
            }
        });

        clear_button.setMnemonic('c');
        clear_button.setText("Clear");
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        s_slider.setMajorTickSpacing(50);
        s_slider.setMaximum(200);
        s_slider.setMinorTickSpacing(5);
        s_slider.setPaintLabels(true);
        s_slider.setPaintTicks(true);
        s_slider.setValue((int)(zyklotron.getS() * 10));
        s_slider.setAutoscrolls(true);
        s_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                s_sliderStateChanged(evt);
            }
        });

        jLabel7.setText("S in dm");
        jLabel7.setToolTipText("Distance between the to half circles in dm");

        add_object_button.setMnemonic('a');
        add_object_button.setText("Add an object");
        add_object_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_object_buttonActionPerformed(evt);
            }
        });

        jLabel6.setText("Time factor");
        jLabel6.setToolTipText("Real timespan * (|time factor| + 1) ^ sign ");

        time_fac_slider.setMajorTickSpacing(5);
        time_fac_slider.setMaximum(10);
        time_fac_slider.setMinimum(-20);
        time_fac_slider.setMinorTickSpacing(1);
        time_fac_slider.setPaintLabels(true);
        time_fac_slider.setPaintTicks(true);
        time_fac_slider.setSnapToTicks(true);
        time_fac_slider.setValue((int)zyklotron.getTime_fac());
        time_fac_slider.setAutoscrolls(true);
        time_fac_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                time_fac_sliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(clear_button)
                        .addGap(36, 36, 36)
                        .addComponent(add_object_button)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(time_fac_slider, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                            .addComponent(pixel_slider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(radius_slider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(current_slider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(magnetic_induction_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mass_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(s_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(current_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(magnetic_induction_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(mass_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radius_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(s_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pixel_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(time_fac_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel6)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear_button)
                    .addComponent(add_object_button))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout options_frameLayout = new javax.swing.GroupLayout(options_frame.getContentPane());
        options_frame.getContentPane().setLayout(options_frameLayout);
        options_frameLayout.setHorizontalGroup(
            options_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(options_frameLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        options_frameLayout.setVerticalGroup(
            options_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cyclotron simulation");

        javax.swing.GroupLayout zyklotronLayout = new javax.swing.GroupLayout(zyklotron);
        zyklotron.setLayout(zyklotronLayout);
        zyklotronLayout.setHorizontalGroup(
            zyklotronLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );
        zyklotronLayout.setVerticalGroup(
            zyklotronLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 413, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zyklotron, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zyklotron, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void current_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_current_sliderStateChanged
      if (current_slider.getValue() == 0){
         current_slider.setValue(1);
      }
      current_slider.setToolTipText(current_slider.getValue() + "nV");
      zyklotron.setCurrent(current_slider.getValue() * 1E-9);
   }//GEN-LAST:event_current_sliderStateChanged

   private void magnetic_induction_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_magnetic_induction_sliderStateChanged
      if (magnetic_induction_slider.getValue() == 0){
         magnetic_induction_slider.setValue(1);
      }
      magnetic_induction_slider.setToolTipText(magnetic_induction_slider.getValue() + "nT");
      zyklotron.setMagnetic_induction(magnetic_induction_slider.getValue() * 1E-9);
   }//GEN-LAST:event_magnetic_induction_sliderStateChanged

   private void mass_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mass_sliderStateChanged
      if (mass_slider.getValue() == 0){
         mass_slider.setValue(1);
      }
      mass_slider.setToolTipText(mass_slider.getValue() + " proton masses");
      zyklotron.setObject_mass(mass_slider.getValue());
   }//GEN-LAST:event_mass_sliderStateChanged

   private void radius_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radius_sliderStateChanged
      if (radius_slider.getValue() == 0){
         radius_slider.setValue(1);
      }
      radius_slider.setToolTipText(radius_slider.getValue() + "dm");
      zyklotron.setRadius_m(radius_slider.getValue() / 10.0);
   }//GEN-LAST:event_radius_sliderStateChanged

   private void pixel_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pixel_sliderStateChanged
      if (pixel_slider.getValue() == 0){
         pixel_slider.setValue(1);
      }
      pixel_slider.setToolTipText(pixel_slider.getValue() + " pixel per m");
      zyklotron.setPx_per_m(pixel_slider.getValue());
   }//GEN-LAST:event_pixel_sliderStateChanged

   private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
      zyklotron.clear();
   }//GEN-LAST:event_clear_buttonActionPerformed

   private void s_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_s_sliderStateChanged
      if (s_slider.getValue() == 0){
         s_slider.setValue(1);
      }
      s_slider.setToolTipText(s_slider.getValue() + "dm");
      zyklotron.setS(s_slider.getValue() / 10.0);
   }//GEN-LAST:event_s_sliderStateChanged

   private void add_object_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_object_buttonActionPerformed
      zyklotron.addFlyingObject();
   }//GEN-LAST:event_add_object_buttonActionPerformed

   private void time_fac_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_time_fac_sliderStateChanged
      time_fac_slider.setToolTipText(String.format("%2.3fs per real s", Math.pow(Math.abs(time_fac_slider.getValue()) + 1, Math.signum(time_fac_slider.getValue()))));
      zyklotron.setTime_fac(time_fac_slider.getValue());
   }//GEN-LAST:event_time_fac_sliderStateChanged

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /*
       * Set the Nimbus look and feel
       */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
       * If Nimbus (introduced in Java SE 6) is not available, stay with the
       * default look and feel. For details see
       * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /*
       * Create and display the form
       */
      java.awt.EventQueue.invokeLater(new Runnable() {

         @Override
         public void run() {
            new MainFrame().setVisible(true);
         }
      });
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_object_button;
    private javax.swing.JButton clear_button;
    private javax.swing.JSlider current_slider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider magnetic_induction_slider;
    private javax.swing.JSlider mass_slider;
    private javax.swing.JFrame options_frame;
    private javax.swing.JSlider pixel_slider;
    private javax.swing.JSlider radius_slider;
    private javax.swing.JSlider s_slider;
    private javax.swing.JSlider time_fac_slider;
    private cyclotronsimulation.Cyclotron zyklotron;
    // End of variables declaration//GEN-END:variables
}
